Admón de versiones:
>Software Centralizado: Repositorio en servidor. Solo se puede guardar localmente con una copia. Se bloquea el acceso para que no haya acceso, con esto, no hayan archivos duplicados. Terminados los cambios, se cargan como nueva versión.
>Distribuidos: Repositorio no único. Todos los devs tienen una copia con todas las versiones e historial de modificaciones. Permite la sincronización de todos los repositorios para la versión más actualizada.

$checkout: Descarga de los ficheros del repositorio.
$stage: Modificación y lista de espera para su carga.
$update: Actualizar a la última versión.
$commit: Confirmar que los archivos en stage son la última versión correcta.
$push: Cargar al repositorio.
$clone / pull: Obtener los archivos actualizados.

---------------------------------------------------------------------------

$ git config --global user.name "Usuario"
$ git config --globar user.email
$ git config --list  //observar configuración

ls // cd // localizar en la carpeta de trabajo

$ git init
$ git status

---------------------------------------------------------------------------

Estados de archivos: Modificado, preparado, confirmado.

Rama: Oirigin Master (punto de partida):
	Carpeta: Working directory.
	Archivos: Untracked / Unmodified. El dev puede: modified para Confirmar -> $ git add -> staged.
$ commit: cambios confirmados.

---------------------------------------------------------------------------

$ git remote add oirigin https://github.com/Muslava/PruebaILB.git
$ git commit -m "Prueba núm 1"
$ git push -u oirigin master	//login

$ git clone https://github.com/Muslava/PruebaILB.git  //descargar repositorio

---------------------------------------------------------------------------

Cambios de repositorio:
$ git pull origin master
$ git show x000000

Ramas:
principal -> master
$ git branch "RamaNueva"
$ git checkout	//en cuál rama me encuentro
$ git branch	//qué ramas hay
$ git checkout RamaNueva	//cambiar de rama
$ git merge RamaNueva	//combinar RamaNueva con master
$ git branch -d RamaNueva	//elimina la rama

Commits:
$ git log
$ git show xx0x000x0x	//info
$ git diff xx0x000x0x	//diferencias
	Corrección:
	$ git checkout x00x0x00000	//revertir a la penúltima versión
	$ git push oirigin master
	$ git commit --amend	//borrar el mensaje para que el commit sea reemplazado
	$ git revert x00x0x00000	//anterior al último

---------------------------------------------------------------------------

$ git pull	//otener los cambios localmente

Omisión de archivos:	//pueden ser: .log registros; .exe compilaciones; .node node_modules; carpetas IDE; .txt notas personales.
.gitignore	//nombre del archivo
carpeta/	//es una carpeta
$ git add .